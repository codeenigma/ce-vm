ENV['VAGRANT_NO_PARALLEL'] = 'yes'

net_name = "codeenigma-cevm"

shared_volumes.push(home_ce_volume)

# Vagrant uid change.
$vagrant_uid = <<SCRIPT
OWN_CHANGED=0
if [ "$(id -u vagrant)" != "#{parsed_conf['docker_vagrant_user_uid']}" ]; then
  usermod -u #{parsed_conf['docker_vagrant_user_uid']} vagrant
  echo "User ID changed to #{parsed_conf['docker_vagrant_user_uid']}."
  chown -R vagrant:www-data /vagrant
  echo "Changed ownership of shared files accordingly."
  OWN_CHANGED=1
fi
if [ "$(id -g vagrant)" != "#{parsed_conf['docker_vagrant_group_gid']}" ]; then
  groupmod -g #{parsed_conf['docker_vagrant_group_gid']} vagrant
  OWN_CHANGED=1
fi
if [ $OWN_CHANGED -eq 1 ]; then
  echo "Interrupting the provisioning for the ownership changes to take effect."
  echo "This will trigger a Vagrant error below, do not panic this is normal."
  echo "Please manually relaunch the process using 'vagrant up'."
  exit 1
fi

SCRIPT

# Initial data sync.
$mirror = <<SCRIPT
echo "Initial data mirror synchronisation."
if [ ! -d "#{guest_project_dir}" ]; then
  mkdir "#{guest_project_dir}"
fi
rsync -av --exclude=".git" --exclude=".vagrant" --exclude=".unison.*" "#{guest_mirror_dir}#{guest_project_dir}/" "#{guest_project_dir}"
SCRIPT

if (parsed_conf['docker_app_privileged'] == "auto")
  parsed_conf['docker_app_privileged'] = "false"
end
if (parsed_conf['docker_db_privileged'] == "auto")
  parsed_conf['docker_db_privileged'] = "false"
  if (RUBY_PLATFORM =~ /darwin/)
    parsed_conf['docker_db_privileged'] = "true"
  end
end

Vagrant.configure(VAGRANTFILE_API_VERSION) do |config|

  ################# Common config.
  config.ssh.insert_key = false
  config.ssh.forward_agent = true
  # Create our network silently. @todo check if it exists first.   
  config.trigger.before :up, :force => true, :stdout => false, :stderr => false do     
    run "docker network create --subnet=#{parsed_conf['net_subnet']} --gateway=#{parsed_conf['net_gateway']} #{net_name}"
  end
  ################# END Common config.  

  ################# Database VM.
  config.vm.define "db-vm" do |db|
    db.trigger.before :up do
      if (RUBY_PLATFORM =~ /darwin/)
        info "Network configuration changes needed. This require administrative privileges."
        run "sudo ifconfig lo0 alias #{parsed_conf['net_db_ip']}/24"
      end
    end
    # Base properties.
    db.ssh.host = '127.0.0.1'
    db.ssh.guest_port = parsed_conf['docker_db_ssh_port']
    db.vm.hostname = "#{vdb}"
    # Disable default port forwarding, as we define a custom one.
    db.vm.network :forwarded_port, guest: 22, host: parsed_conf['docker_db_ssh_port'], id: 'ssh'
    # Shared folders
    db.vm.synced_folder ".", "/vagrant", disabled: true
    db_volumes = []
    shared_volumes.each do |synced_folder|
      db_volumes.push("#{synced_folder['source']}/:#{synced_folder['dest']}:delegated")
    end
    db_volumes.push("#{data_volume['source']}/:#{data_volume['dest']}:delegated")
    # First ensure 'vagrant' ownership match.
    db.vm.provision "shell", inline: $vagrant_uid
    # Run actual playbooks.
    run_playbook_dirs.each do |ansible_folder|
      db.vm.provision 'ansible_local', run: "always" do |ansible|
        ansible.playbook = "#{ansible_folder}/db.yml"
        ansible.extra_vars = ansible_extra_vars
      end
    end
    # Docker settings.
    db.vm.provider "docker" do |d|
      d.force_host_vm = false
      d.image = "pmce/jessie64:3.0.0"
      d.name = "#{vdb}"
      d.create_args = [
        "--network=#{net_name}",
        "--ip",
        "#{parsed_conf['net_db_ip']}",
        "-P",
        "--privileged=#{parsed_conf['docker_db_privileged']}", # Tomcat7 needs this on Mac.
      ]
      d.ports = parsed_conf['docker_db_fwd_ports']
      d.has_ssh = true
      d.volumes = db_volumes
    end
  end
  ################# END Database VM.

  ################# App VM.
  config.vm.define "app-vm", primary: true do |app|
    app.trigger.before :up do
      if (RUBY_PLATFORM =~ /darwin/)
        info "Network configuration changes needed. This require administrative privileges."
        run "sudo ifconfig lo0 alias #{parsed_conf['net_app_ip']}/24"
      end
    end
    # Base properties.
    app.ssh.host = '127.0.0.1'
    app.ssh.guest_port = parsed_conf['docker_app_ssh_port']
    app.vm.hostname = "#{vapp}"
    # Disable default port forwarding, as we define a custom one.
    app.vm.network :forwarded_port, guest: 22, host: parsed_conf['docker_app_ssh_port'], id: 'ssh'
    # Shared folders
    app.vm.synced_folder ".", "/vagrant", disabled: true
    app_volumes = []
    shared_volumes.each do |synced_folder|
      app_volumes.push("#{synced_folder['source']}/:#{synced_folder['dest']}:delegated")
    end
    dest = "#{data_volume['dest']}"
    source = "#{data_volume['source']}"
    if(parsed_conf['docker_mirror'])
      dest = "#{guest_mirror_dir}#{dest}"
    end
    app_volumes.push("#{source}/:#{dest}:delegated")
    if(parsed_conf['docker_mirror'])
      app.vm.provision "shell", inline: $mirror
    end
    # First ensure 'vagrant' ownership match.
    app.vm.provision "shell", inline: $vagrant_uid
    # Run actual playbooks.
    run_playbook_dirs.each do |ansible_folder|
        app.vm.provision 'ansible_local', run: "always" do |ansible|
          ansible.playbook = "#{ansible_folder}/app.yml"
          ansible.extra_vars = ansible_extra_vars
        end
    end
    # Docker settings.
    app.vm.provider "docker" do |d|
      d.force_host_vm = false
      d.image = "pmce/jessie64:3.0.0"
      d.name = "#{vapp}"
      d.create_args = [
        "--network=#{net_name}",
        "--ip",
        "#{parsed_conf['net_app_ip']}",
        "-P",
        "--privileged=#{parsed_conf['docker_app_privileged']}",
      ]
      d.ports = parsed_conf['docker_app_fwd_ports']
      d.has_ssh = true
      d.volumes = app_volumes
    end
  end
  ################# END App VM.

end
