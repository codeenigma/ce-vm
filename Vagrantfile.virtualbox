
################ Folder sync options.
################################################################################

# Default native options. 
folder_sync_options = {type: "virtualbox", owner: "vagrant", group: "www-data", :mount_options => ['dmode=775,fmode=774']}
# Rsync support.
if(parsed_conf['vbox_synced_folder_type'] == "rsync")
  rsync_exclude_paths = [
    ".git/",
    File.join("#{parsed_conf['webroot']}", 'sites', '*', 'files', '*'),
    File.join("#{parsed_conf['webroot']}", 'var', '*'),
  ]
  folder_sync_options = {type: "rsync", owner: "vagrant", group: "www-data", rsync__exclude: rsync_exclude_paths}
end
# NFS Sharing.
if(parsed_conf['vbox_synced_folder_type'] == "nfs")
  folder_sync_options = {:nfs => true, :mount_options => ["rw"]}
  if (RUBY_PLATFORM =~ /darwin/)
        folder_sync_options = {:nfs => true, :mount_options => ["rw"], :bsd__nfs_options => ["rw", "no_subtree_check", "all_squash"]}
      elsif (RUBY_PLATFORM =~ /linux/)
        folder_sync_options = {:nfs => true, :mount_options => ["rw"], :linux__nfs_options => ["rw", "no_subtree_check", "all_squash"]}
  end
end
# Custom mount.
if(parsed_conf['vbox_synced_folder_options_overrides'] != "")
  folder_sync_options = parsed_conf['vbox_synced_folder_options_overrides']
end

################ Main configuration.
################################################################################
Vagrant.configure(VAGRANTFILE_API_VERSION) do |config|

  ################# Common config.
  config.ssh.insert_key = false
  config.ssh.forward_agent = true
  ################# END Common config.  

  ################# Database VM.
  config.vm.define "db-vm" do |db|
    # Base properties.
    db.vm.box = "pmce/jessie64"
    db.vm.box_version = "3.0.0"
    db.vm.hostname = "#{vdb}"
    # Networking
    db.vm.network :private_network, ip: "192.168.56.3"
    # Shared folders
    shared_volumes.each do |synced_folder|
      db.vm.synced_folder synced_folder['source'], synced_folder['dest'], folder_sync_options
    end
    # Provisioning. First install ansible from repo.
    db.vm.provision "shell", inline: $ansible
    # Run actual playbooks.
    run_playbook_dirs.each do |ansible_folder|
        db.vm.provision 'ansible_local' do |ansible|
          ansible.playbook = "#{ansible_folder}/db.yml"
          ansible.extra_vars = ansible_extra_vars
        end
    end
    # VirtualBox settings.
    db.vm.provider :virtualbox do |vb|
      vb.name = "#{vdb}"
      vb.customize ["modifyvm", :id, "--memory", "#{parsed_conf['vbox_db_memory']}"]
      vb.customize ["modifyvm", :id, "--cpus", "#{parsed_conf['vbox_db_cpus']}"]
    end
  end
  ################# END Database VM.

  ################# App VM.
  config.vm.define "app-vm", primary: true do |app|
    # Base properties.
    app.vm.box = "pmce/jessie64"
    app.vm.box_version = "3.0.0"
    app.vm.hostname = "#{vapp}"
    # Networking
    app.vm.network :private_network, ip: "192.168.56.2"
    # Shared folders
    shared_volumes.each do |synced_folder|
      app.vm.synced_folder synced_folder['source'], synced_folder['dest'], folder_sync_options
    end
    # Provisioning. First install ansible from repo.
    app.vm.provision "shell", inline: $ansible
    # Run actual playbooks.
    run_playbook_dirs.each do |ansible_folder|
        app.vm.provision 'ansible_local' do |ansible|
          ansible.playbook = "#{ansible_folder}/app.yml"
          ansible.extra_vars = ansible_extra_vars
        end
    end
    # VirtualBox settings.
    app.vm.provider :virtualbox do |vb|
      vb.name = "#{vapp}"
      vb.customize ["modifyvm", :id, "--memory", "#{parsed_conf['vbox_app_memory']}"]
      vb.customize ["modifyvm", :id, "--cpus", "#{parsed_conf['vbox_app_cpus']}"]
    end
  end
  ################# END App VM.

end
